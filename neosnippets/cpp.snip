include c.snip

# #include <...>
snippet inc
options head
alias   #inc, #include, include
    #include <${1:iostream}>
    ${0}

# #include "..."
snippet inc2
options head
alias   #inc2, #include2, include2
    #include "${1}"
    ${0}

snippet template
alias   temp
    template<typename ${1:T}> ${0}

snippet class
options head
    class ${1} {
    public:
        $1(${2});
    };

    $1::$1($2) {
        ${0}
    }

snippet class-w/o-constructor
options head
    class ${1} {
        ${2}
    };

snippet try
options head
abbr    try catch
    try {
        ${1}
    } catch (${2}) {
        ${3}
    }

# range based for ( C++11 feature )
snippet for_CPP11
options head
alias   range
    for (${1:auto} ${2:} : ${3:}) {
        ${0}
    }

# lambda expression ( C++11 feature )
snippet lambda
    [${1}](${2})${3}{ ${4} }${0}

# scoped enumeration ( C++11 feature )
snippet enum_scoped
options head
abbr    enum struct
    enum struct ${1} { ${2} };

# static assert ( C++11 feature )
snippet static_assert
    static_assert( ${1}, "${2}" );${0}

delete  namespace
options head
snippet namespace
    namespace ${1} {
        ${0}
    } // namespace $1

snippet static_cast
    static_cast<${1}>(${2})${0}

snippet reinterpret_cast
    reinterpret_cast<${1}>(${2})${0}

snippet const_cast
    const_cast<${1}>(${2})${0}

snippet dynamic_cast
    dynamic_cast<${1}>(${2})${0}

snippet p
options head
    std::cout << ${0} << std::endl;
    ${1}

snippet std
options head 
    using namespace std;
    ${0}

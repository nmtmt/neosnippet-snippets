snippet     #!
abbr        #!/usr/bin/env python3
alias       shebang
options     head
	#!/usr/bin/env python3
	${0}

snippet     class
abbr        class Class(...): ...
options     head
	class ${1:#:name}(${2:object}):
		def __init__(self, ${3}):
			${0:pass}

snippet     classd
abbr        class Class(...): "..."
options     head
	class ${1:#:name}(${2:object}):
		"""${3:#:class documentation}"""
		def __init__(self, ${4}):
			"""${5:#:__init__ documentation}"""
			${0:pass}

snippet     def
abbr        def function(...): ...
options     head
	def ${1:#:name}(${2}):
		${0:pass}

snippet     defd
abbr        def function(...): """..."""
options     head
	def ${1:#:name}(${2}):
		"""${3:#:function documentation}"""
		${0:pass}

snippet     defm
abbr        def method(self, ...): ...
options     head
	def ${1:#:name}(self, ${2}):
		${0:pass}

snippet     defmd
abbr        def method(self, ...): "..."
options     head
	def ${1:#:name}(self, ${2}):
		"""${3:#:method documentation}"""
		${0:pass}

snippet     elif
abbr        elif ...: ...
options     head
	elif ${1:#:condition}:
		${0:pass}

snippet     else
abbr        else: ...
options     head
	else:
		${0:pass}

snippet     with_open
alias       fileidiom
options     head
	with open(${1:#:file}, '${2:r}') as ${3:f}:
		${0:pass}

snippet     for
abbr        for ... in ...: ...
options     head
	for ${1:#:value} in ${2:#:list}:
		${0:pass}

snippet     if
abbr        if ...: ...
options     head
	if ${1:#:condition}:
		${0:pass}

snippet     ifmain
abbr        if __name__ == '__main__': ...
alias       main
options     head
	if __name__ == '__main__':
		${0:pass}

snippet     tryexcept
abbr        try: ... except ...: ...
options     head
	try:
		${1:pass}
	except ${2:#:ExceptionClass}:
		${3:pass}

snippet     tryfinally
abbr        try: ... finally: ...
options     head
	try:
		${1:pass}
	finally:
		${2:pass}

snippet     while
abbr        while ...: ...
options     head
	while ${1:#:condition}:
		${0:pass}

snippet     with
abbr        with {func}({file}) as :
options     head
	with ${1:open}(${2:#:filename, mode}) as ${3:f}:
		${0:pass}

snippet     filter
abbr        [x for x in {list} if {condition}]
	[$1 for ${1:x} in ${2:#:list} if ${3:#:condition}]

snippet     print
options     word
	print(${0:#:TARGET})

snippet     coding
abbr        # -*- coding ...
	# -*- coding: utf-8 -*-

snippet     getattr
abbr        getattr(..., ...)
options     word
	getattr(${1:#:obj}, ${2:#:attr})

snippet     setattr
abbr        setattr(..., ...)
	setattr(${1:#:obj}, ${2:#:attr}, ${3:#:value})

snippet     hasattr
abbr        hasattr(..., ...)
options     word
	hasattr(${1:#:obj}, ${2:#:attr})

snippet     pdb
abbr        import pdb..
	import pdb; pdb.set_trace()
	${0}

snippet     ipdb
abbr        import ipdb..
	import ipdb; ipdb.set_trace()
	${0}

snippet     pudb
abbr        import pudb..
	import pudb; pudb.set_trace()
	${0}

snippet     ipy
abbr        import ipython
	from IPython import embed; embed()
	${0}

snippet     pltimport
options		head
	import matplotlib.pyplot as plt
	${0}

snippet		cmap
	cmap = plt.get_cmap("tab10") # tab20, Accent
	${0}

snippet     axplot
	${1:ax}.plot(${1:xs}, ${2:ys}, label="${3:label}", marker=".", markersize=12, linewidth=None)
	${0}

snippet     axscatter
	${1:ax}.scatter(${2:xs}, ${3:ys}, label="${4:label}", c=None, s=12, marker=".", alpha=None, linewidth=None)
	${0}

snippet		axsettings
	${1:ax}.grid(color='lightgrey', linestyle='-', linewidth=1)
	$1.legend()
	$1.set_xlabel("${2}", labelpad=None)
	$1.set_ylabel("${3}", labelpad=None)
	$1.set(aspect=1, xlim=(${4:x_min,x_max}), ylim=(${5:y_min,y_max}))
	$1.set_title("${6:title}")
	${0}

snippet		axgrid
	${1:ax}.grid(color='lightgrey', linestyle='-', linewidth=1)
	${0}

snippet		axlabel
	${1:ax}.set_xlabel("${2}", labelpad=None)
	$1.set_ylabel("${3}", labelpad=None)
	${0}

snippet		axaspect
alias		aspect
	${1:ax}.set(aspect=1, xlim=None, ylim=None)

snippet		axtitle
	${1:ax}.set_title("${2}")
	${0}

snippet     addsubplot
alias		subplot
	${1:ax} = fig.add_subplot(${2:111})
	${0}

snippet     figure
	fig = plt.figure(figsize=(${1:8,6}))
	fig.subplots_adjust(wspace=0.35, hspace=0.2)
	${0}

snippet		adjust_subplots
	${1:fig}.subplots_adjust(wspace=0.35, hspace=0.2)

snippet     subplots
alias		plots
	fig, axes = plt.subplots(nrows=1, ncols=2, sharex=False, sharey=False, figsize=(8,6))
	fig.subplots_adjust(wspace=0.35, hspace=0.2)
	fig.suptitle('${1}', fontsize=16)
	${0}

snippet		savefig
alias		figsave
	fig.savefig(${1:PATH}, dpi=100, transparent=True)

snippet		savebuf
alias		buf
	import io, cv2
	buf = io.BytesIO()
	fig.savefig(buf, format="png", dpi=120)
	buf.seek(0)
	img = cv2.imdecode(np.frombuffer(buf.getvalue(), dtype=np.uint8), 1)
	img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
	cv2.imshow("name", img)
	cv2.waitKey(1)
	${0}

snippet		pilnew
	pilimg = Image.new('RGB', ${1:(256,256)}, color=${2:(255,255,255)})
	${0}

snippet		pildraw
	${1:from PIL impot ImageDraw}
	draw = ImageDraw.Draw(pilimg)
	${0}

snippet		piltext
	font = ImageFont.truetype("${2:~/.font/Cica-Regular.ttf}", ${3:fontsize})
	draw.text(${4:(0,0)}, '${5:text}', font=font, fill=${6:(0,0,0,128)})
	${0}

snippet     gifsave
alias		pilgifsave
	${1:pilimgs}[0].save("${2:sample.gif}", save_all=True, optimize=False, append_images=$1[1:], duration=100, loop=0)
	${0}

snippet		jsonsave
	with open(${1:PATH}, "w") as f:
		json.dump(${2:OBJ}, f, indent=2)
	${0}

snippet		jsonload
	with open(${1:PATH}, "r") as f:
		${2:DATA} = json.load(f)
	${0}

snippet		tqdm
	from tqdm import tqdm
	bar = tqdm(total=${1:epoch}, ncols=${2:80}, initial=${3:0})
	#bar.clear() # clear line
	#bar.refresh() # show line manually
	bar.update(n=1)
	bar.close()
	${0}

snippet		tqdmrange
alias		rangetqdm,tqdmitr
	tqdm(${1:iterable}, ncols=${3:80}):${0}

snippet		pklload
alias		pickleload
	import pickle
	with open(${1:PATH}, "rb") as f:
		${2:DATA} = pickle.load(f)
	${0}

snippet		pklsave
alias		picklesave
	import pickle
	with open(${1:PATH}, "wb") as f:
		pickle.dump(${2:DATA}, f, protocol=3)
	${0}

snippet		pklbz2load
alias		picklebz2load
	import pickle, bz2
	with bz2.BZ2File(${1:PATH}, 'rb') as f:
		pkl = f.read()
		${2:DATA} = pickle.loads(pkl)
	${0}

snippet		pklbz2save
alias		picklebz2save
	import pickle, bz2
	with bz2.BZ2File(${1:PATH}, 'wb', compresslevel=9) as f:
		pkl = pickle.dumps(${2:DATA}, protocol=3)
		f.write(pkl)
	${0}

snippet		read_csv
alias		pd_read_csv
	df = pd.read_csv(${0:PATH}, delimiter=None)

snippet		pd_to_datetime
alias		df_to_datetime
	df['${1:COL_NAME}'] = pd.to_datetime(df['${2:COL_NAME}'], format="%Y/%m/%d %H:%M:%S").dt.date

# vim: set noexpandtab :
